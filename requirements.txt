# =============================================================================
# E-commerce Analytics Platform - Requirements
# =============================================================================
# 이 파일은 프로젝트에서 사용하는 모든 Python 패키지와 
# 안정적으로 테스트된 버전을 명시합니다.
# 
# 설치 방법:
# pip install -r requirements.txt
# =============================================================================

# 핵심 데이터 처리 라이브러리
# -----------------------------------------------------------------------------
pandas==2.1.4           # 데이터 조작 및 분석의 핵심 라이브러리
numpy==1.24.3           # 수치 계산과 배열 연산
scipy==1.11.4           # 과학적 계산 (통계, 최적화 등)

# 시각화 라이브러리  
# -----------------------------------------------------------------------------
matplotlib==3.7.2       # 기본 플로팅 라이브러리
seaborn==0.12.2         # 통계적 시각화 (matplotlib 기반)
plotly==5.17.0          # 인터랙티브 시각화
kaleido==0.2.1          # Plotly 정적 이미지 export

# 머신러닝 라이브러리
# -----------------------------------------------------------------------------
scikit-learn==1.3.2     # 전통적 머신러닝 알고리즘
xgboost==2.0.3          # 그래디언트 부스팅 (높은 성능)
lightgbm==4.1.0         # 빠른 그래디언트 부스팅
imbalanced-learn==0.11.0 # 불균형 데이터셋 처리

# 딥러닝 라이브러리 (선택사항 - 추천시스템용)
# -----------------------------------------------------------------------------
tensorflow==2.15.0      # 구글 딥러닝 프레임워크
# torch==2.1.2+cpu       # PyTorch (CPU 버전)
# torchvision==0.16.2+cpu # PyTorch 비전 라이브러리

# 시계열 분석
# -----------------------------------------------------------------------------
prophet==1.1.5          # 페이스북 시계열 예측 라이브러리
statsmodels==0.14.1     # 통계 모델링과 계량경제학

# 웹 프레임워크 & API
# -----------------------------------------------------------------------------
streamlit==1.29.0       # 웹 대시보드 구축
fastapi==0.105.0        # 고성능 REST API 프레임워크
uvicorn==0.24.0         # ASGI 웹서버
pydantic==2.5.0         # 데이터 검증 및 설정 관리

# 데이터베이스 & 저장소
# -----------------------------------------------------------------------------
sqlalchemy==2.0.23      # SQL 툴킷 및 ORM
sqlite3                 # 경량 데이터베이스 (파이썬 내장)
redis==5.0.1            # 인메모리 데이터 구조 저장소
pyarrow==14.0.2         # 컬럼형 인메모리 분석 (Parquet 지원)

# 설정 및 환경 관리
# -----------------------------------------------------------------------------
python-dotenv==1.0.0    # .env 파일 환경변수 로드
pyyaml==6.0.1           # YAML 파일 파싱
click==8.1.7            # 명령줄 인터페이스 구축

# 데이터 검증 및 품질
# -----------------------------------------------------------------------------
great-expectations==0.18.8  # 데이터 품질 검증
cerberus==1.3.5         # 데이터 스키마 검증

# 유틸리티 라이브러리
# -----------------------------------------------------------------------------
tqdm==4.66.1            # 진행률 표시 바
joblib==1.3.2           # 병렬 처리 및 모델 저장
faker==20.1.0           # 가짜 데이터 생성 (테스트용)
python-dateutil==2.8.2  # 날짜/시간 처리 확장

# 로깅 및 모니터링
# -----------------------------------------------------------------------------
loguru==0.7.2           # 개선된 로깅 라이브러리
mlflow==2.8.1           # 머신러닝 실험 추적

# 개발 도구 (선택사항)
# -----------------------------------------------------------------------------
jupyter==1.0.0          # Jupyter 노트북
ipykernel==6.26.0       # Jupyter 커널
notebook==7.0.6         # Jupyter 노트북 인터페이스

# 코드 품질 도구 (개발용)
# -----------------------------------------------------------------------------
pytest==7.4.3          # 단위 테스트 프레임워크
pytest-cov==4.1.0      # 테스트 커버리지
black==23.11.0          # 코드 포매터
flake8==6.1.0           # 코드 스타일 검사

# 보고서 생성
# -----------------------------------------------------------------------------
reportlab==4.0.7        # PDF 보고서 생성
jinja2==3.1.2           # 템플릿 엔진

# 성능 최적화 (선택사항)
# -----------------------------------------------------------------------------
numba==0.58.1           # JIT 컴파일러 (수치 계산 가속)
dask==2023.12.0         # 병렬 컴퓨팅 라이브러리

# HTTP 요청 (API 호출용)
# -----------------------------------------------------------------------------
requests==2.31.0       # HTTP 라이브러리
httpx==0.25.2          # 비동기 HTTP 클라이언트

# =============================================================================
# 설치 후 확인 방법:
# 
# 1. 기본 라이브러리 테스트:
#    python -c "import pandas, numpy, matplotlib; print('기본 라이브러리 OK')"
#
# 2. 머신러닝 라이브러리 테스트:
#    python -c "import sklearn, xgboost, lightgbm; print('ML 라이브러리 OK')"
#
# 3. 웹 프레임워크 테스트:
#    python -c "import streamlit, fastapi; print('웹 프레임워크 OK')"
#
# 4. 전체 환경 테스트:
#    python -m src.utils.environment_check
# ============================================================================= 